#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
########################################################################################################################
#  parse_all_cluts.py                                                                                                  #
#                                                                                                                      #
#  Copyright (c) 2023 Jason Nishi                                                                                      #
#                                                                                                                      #
#  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated        #
#  documentation files (the “Software”), to deal in the Software without restriction, including without limitation     #
#  the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and    #
#  to permit persons to whom the Software is furnished to do so, subject to the following conditions:                  #
#                                                                                                                      #
#  The above copyright notice and this permission notice shall be included in all copies or substantial portions of    #
#  the Software.                                                                                                       #
#                                                                                                                      #
#  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO    #
#  THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE      #
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF           #
#  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS   #
#  IN THE SOFTWARE.                                                                                                    #
########################################################################################################################

#########################
#  === HEADER INFO ===  #
#########################

"""
An all-in-one script to parse the CLUT data out of the GMIC information file
that gets generated by `gmic up` and uses that to generate a more detailed
information file for the CLUTs.
"""

__author__ = "Jason Nishi"
__version__ = "0.1.0"
__license__ = "MIT"

#####################
#  === IMPORTS ===  #
#####################

import argparse
import copy
from enum import Enum
import io
from itertools import zip_longest
import json
import logging
import pathlib
import pprint
import re
import typing

import yaml

###############################
#  === GENERAL CONSTANTS ===  #
###############################

LOGGER = logging.getLogger(__name__)
KNOWN_LUT_PROVIDER_DATA_YAML = """
# Known information about the various providers, pieced from GMIC information.

---

# Color Presets - Abigail Gonzalez (abigailgonzalez)
abigailgonzalez:
  category_id: abigailgonzalez
  category_name: Abigail Gonzalez
  credits: Abigail Gonzalez - FreshLUTs
  grouping: Color Presets
  url: https://www.abigailgonzalez.com/

# Color Presets - Alex Jordan (alexjordan)
alexjordan:
  category_id: alexjordan
  category_name: Alex Jordan
  credits: Alex Jordan - FreshLUTs
  grouping: Color Presets
  url: https://freshluts.com/users/1

# Color Presets - Berat (berat)
berat:
  category_id: berat
  category_name: Berat
  credits: Berat - FreshLUTs
  grouping: Color Presets
  url: https://freshluts.com/users/10185

# Color Presets - Cinematic (cinematic)
cinematic:
  category_id: cinematic
  category_name: Cinematic
  credits: Fix the Photo - Free Cinematic LUTs
  grouping: Color Presets
  url: http://fixthephoto.com/free-cinematic-luts

# Color Presets - Cinematic Travel (cinematic_travel)
cinematic_travel:
  category_id: cinematic_travel
  category_name: Cinematic Travel
  credits: 911templates - 30 Cinematic Travel Color Presets
  grouping: Color Presets
  url: https://911templates.com/30travel_presets

# Color Presets - Creative Pack (creative)
creative:
  category_id: creative
  category_name: Creative Pack
  credits: RawTherapee
  grouping: Color Presets
  url: https://rawpedia.rawtherapee.com/Film_Simulation

# Color Presets - Eric Ellerbrock (ericellerbrock)
ericellerbrock:
  category_id: ericellerbrock
  category_name: Eric Ellerbrock
  credits: Eric Ellerbrock - FreshLUTs
  grouping: Color Presets
  url: https://www.facebook.com/eric.ellerbrockom

# Color Presets - FilterGrade Cinematic (filtergrade)
filtergrade:
  category_id: filtergrade
  category_name: FilterGrade Cinematic
  credits: FilterGrade - Free Cinematic LUTs Pack
  grouping: Color Presets
  url: https://filtergrade.com/free-cinematic-luts-video-editing

# Color Presets - Hollywood Movies (hollywood)
hollywood:
  category_id: hollywood
  category_name: Hollywood Movies
  credits: Hollywood LUTs
  grouping: Color Presets
  url: https://drive.google.com/file/d/1G8sk_TEI14xbpNQaJnuFmrFlJ8_nHIyl/view

# Color Presets - InAvision (inavision)
inavision:
  category_id: inavision
  category_name: InAvision
  credits: InAvision - FreshLUTs
  grouping: Color Presets
  url: https://freshluts.com/users/64078

# Color Presets - J.T. Semple (jtsemple)
jtsemple:
  category_id: jtsemple
  category_name: J.T. Semple
  credits: J.T. Semple - FreshLUTs
  grouping: Color Presets
  url: https://freshluts.com/users/120

# Color Presets - Kyler Holland (kylerholland)
kylerholland:
  category_id: kylerholland
  category_name: Kyler Holland
  credits: Kyler Holland 10 Free CLUTs
  grouping: Color Presets
  url: https://sellfy.com/p/SGnG/

# Color Presets - Lutify.Me (lutifyme)
lutifyme:
  category_id: lutifyme
  category_name: Lutify.Me
  credits: Lutify.Me Free LUTs
  grouping: Color Presets
  url: https://lutify.me/free-luts/

# Color Presets - Michael Ezra (michaelezra)
michaelezra:
  category_id: michaelezra
  category_name: Michael Ezra
  credits: Michael Ezra
  grouping: Color Presets
  url: https://michaelezra.com

# Color Presets - Moviz (moviz)
moviz:
  category_id: moviz
  category_name: Moviz
  credits: Moviz LUTs
  grouping: Color Presets
  url: null

# Color Presets - Ohad Peretz (ohadperetz)
ohadperetz:
  category_id: ohadperetz
  category_name: Ohad Peretz
  credits: Ohad Peretz - FreshLUTs
  grouping: Color Presets
  url: https://freshluts.com/users/992

# Color Presets - Olivio Sarikas (oliviosarikas)
oliviosarikas:
  category_id: oliviosarikas
  category_name: Olivio Sarikas
  credits: Olivio Sarikas - Free LUT Packs
  grouping: Color Presets
  url: https://gumroad.com/sarikasat

# Color Presets - ON1 Photography (on1)
on1:
  category_id: on1
  category_name: ON1 Photography
  credits: ON1 Free Photography LUTs
  grouping: Color Presets
  url: https://www.on1.com/free/lut-packs/

# Color Presets - PictureFX (picturefx)
picturefx:
  category_id: picturefx
  category_name: PictureFX
  credits: PictureFX - A Free HaldCLUT Set
  grouping: Color Presets
  url: https://marcrphoto.wordpress.com/specials/698-2/

# Color Presets - Pixelmator (pixelmator)
pixelmator:
  category_id: pixelmator
  category_name: Pixelmator
  credits: Pixelmator Free LUTs
  grouping: Color Presets
  url: https://www.pixelmator.com/pro/free-luts/

# Color Presets - PIXLS.US (pixlsus)
pixlsus:
  category_id: pixlsus
  category_name: PIXLS.US
  credits: PIXLS.US Contributors
  grouping: Color Presets
  url: https://discuss.pixls.us/t/help-to-create-a-set-of-pixls-us-color-luts

# Color Presets - Purple11 (purple11)
purple11:
  category_id: purple11
  category_name: Purple11
  credits: Purple11 - Free LUTs
  grouping: Color Presets
  url: https://purple11.com/free-luts/

# Color Presets - RocketStock (rocketstock)
rocketstock:
  category_id: rocketstock
  category_name: RocketStock
  credits: RocketStock 35 Free LUTs for Color Grading
  grouping: Color Presets
  url: https://www.rocketstock.com/free-after-effects-templates/35-free-luts-for-color-grading-videos/

# Color Presets - Shamoon Abbasi (shamoonabbasi)
shamoonabbasi:
  category_id: shamoonabbasi
  category_name: Shamoon Abbasi
  credits: Shamoon Abbasi - FreshLUTs
  grouping: Color Presets
  url: https://www.facebook.com/shamoon

# Color Presets - SmallHD Movie Look (smallhd)
smallhd:
  category_id: smallhd
  category_name: SmallHD Movie Look
  credits: SmallHD Free Movie Look Pack
  grouping: Color Presets
  url: https://www.smallhd.com/community/movie-looks-download

# Color Presets - Todd Blankenship (toddblankenship)
toddblankenship:
  category_id: toddblankenship
  category_name: Todd Blankenship
  credits: Todd Blankenship - Free LUTs
  grouping: Color Presets
  url: https://www.shutterstock.com/blog/free-luts-for-log-footage

# Color Presets - Youssef Hossam (youssefhossam)
youssefhossam:
  category_id: youssefhossam
  category_name: Youssef Hossam
  credits: Youssef Hossam
  grouping: Color Presets
  url: https://freshluts.com/users/52679

# Color Presets - Others (others)
others:
  category_id: others
  category_name: Others
  credits: null
  grouping: Color Presets
  url: null

# Simulate Film - Black & White (bw)
bw:
  category_id: bw
  category_name: Black & White
  credits: Pat David
  grouping: Simulate Film
  url: https://patdavid.net/2013/08/film-emulation-presets-in-gmic-gimp.html

# Simulate Film - Instant [Consumer] (instant_consumer)
instant_consumer:
  category_id: instant_consumer
  category_name: Instant [Consumer]
  credits: Pat David
  grouping: Simulate Film
  url: https://patdavid.net/2013/08/film-emulation-presets-in-gmic-gimp.html

# Simulate Film - Instant [Pro] (instant_pro)
instant_pro:
  category_id: instant_pro
  category_name: Instant [Pro]
  credits: Pat David
  grouping: Simulate Film
  url: https://patdavid.net/2013/08/film-emulation-presets-in-gmic-gimp.html

# Simulate Film - Fuji XTrans III (fujixtransiii)
fujixtransiii:
  category_id: fujixtransiii
  category_name: Fuji XTrans III
  credits: Stuart Sowerby - Fuji Film Simulation Profiles
  grouping: Simulate Film
  url: http://blog.sowerby.me/fuji-film-simulation-profiles

# Simulate Film - Negative [Color] (negative_color)
negative_color:
  category_id: negative_color
  category_name: Negative [Color]
  credits: Pat David
  grouping: Simulate Film
  url: https://patdavid.net/2013/08/film-emulation-presets-in-gmic-gimp.html

# Simulate Film - Negative [New] (negative_new)
negative_new:
  category_id: negative_new
  category_name: Negative [New]
  credits: Pat David
  grouping: Simulate Film
  url: https://patdavid.net/2013/08/film-emulation-presets-in-gmic-gimp.html

# Simulate Film - Negative [Old] (negative_old)
negative_old:
  category_id: negative_old
  category_name: Negative [Old]
  credits: Pat David
  grouping: Simulate Film
  url: https://patdavid.net/2013/08/film-emulation-presets-in-gmic-gimp.html

# Simulate Film - Print Films (print)
print:
  category_id: print
  category_name: Print Films
  credits: Juan Melara - Print Film LUTs For Download
  grouping: Simulate Film
  url: http://juanmelara.com.au/print-film-emulation-luts-for-download

# Simulate Film - Slide [Color] (colorslide)
colorslide:
  category_id: colorslide
  category_name: Slide [Color]
  credits: Pat David
  grouping: Simulate Film
  url: https://patdavid.net/2013/08/film-emulation-presets-in-gmic-gimp.html
"""

REMAP_UNDERSCORE_CLUTS_YAML = """
# Values where the help mapping for the LUT name mismatches what is in the
# `gmic help clut` output.
# Left is the value found in the _fx_cluts block, right is the value found
# in the help.

---

cinebm4k: cinebm_4k
deepskintones2: deepskintones_2
deepskintones3: deepskintones_3
faux_infrared_color_p2: faux_infrared_color_p_2
faux_infrared_color_p3: faux_infrared_color_p_3
faux_infrared_color_r0a: faux_infrared_color_r_0a
faux_infrared_color_r0b: faux_infrared_color_r_0b
faux_infrared_color_yp1: faux_infrared_color_yp_1
kh1: kh_1
kh10: kh_10
kh2: kh_2
kh3: kh_3
kh4: kh_4
kh5: kh_5
kh6: kh_6
kh7: kh_7
kh8: kh_8
kh9: kh_9
undeniable2: undeniable_2
westernlut2: westernlut_2
"""

###############################################################################

###############################
#  === GENERAL FUNCTIONS ===  #
###############################


def process_data(path_to_file: str, fetch_func: typing.Callable, process_func: typing.Callable, post_process_func: typing.Callable | None = None) -> typing.Any:
    """process_data _summary_

    :param path_to_file: _description_
    :type path_to_file: str
    :param fetch_func: _description_
    :type fetch_func: typing.Callable
    :param process_func: _description_
    :type process_func: typing.Callable
    :param post_process_func: _description_, defaults to None
    :type post_process_func: typing.Callable | None, optional
    :return: _description_
    :rtype: typing.Any
    """
    filepath = pathlib.Path(path_to_file)
    if filepath.is_file():
        with open(filepath, 'r') as data_fh:
            fetched_data = fetch_func(data_fh)
            processed_data = process_func(fetched_data)
            if post_process_func:
                return post_process_func(processed_data)
            else:
                return processed_data


def log_obj(obj_to_log: typing.Any, title: str | None = None, log_func: typing.Callable = LOGGER.debug):
    """log_obj _summary_

    :param obj_to_log: _description_
    :type obj_to_log: typing.Any
    :param title: _description_, defaults to None
    :type title: str | None, optional
    :param log_func: _description_, defaults to LOGGER.debug
    :type log_func: typing.Callable, optional
    """
    log_func('*' * 60)
    if title:
        log_func(f'{title}:')
    for line in pprint.pformat(obj_to_log).split('\n'):
        log_func(f'  {line}')
    log_func('*' * 60)


################################################################################


def read_base_cluts(path_to_file: str) -> list[str]:
    filepath = pathlib.Path(path_to_file)

    if filepath.is_file():
        with open(filepath, 'r') as data_fh:
            data_lines = data_fh.readlines()
            cleaned = sorted([line.strip() for line in data_lines])

            log_obj(cleaned, 'Base CLUT List from help')
            return cleaned


################################################################################

#######################################################
#  === FX_COLOR_PRESETS/FX_SIMULATE_FILM CAPTURE ===  #
#######################################################

# @TODO: There's probably some way to do this as a decorator style thing.
# Not sure how to do it at this second.
def fx_section_fetch_func_builder(section_re: re.Pattern, category_re: re.Pattern) -> typing.Callable:
    """
    Generates the fetch function for the fx_color_presets & fx_simiulate_film
    sections in the gmic update file, which are basically lists.

    :param section_re: _description_
    :type section_re: re.Pattern
    :param category_re: _description_
    :type category_re: re.Pattern
    :return: _description_
    :rtype: typing.Callable
    """
    def ret_func(fh: io.TextIOWrapper) -> str:
        capture_state = 0

        for line in fh:
            # Section lookout.
            if capture_state == 0 and section_re.search(line):
                LOGGER.debug('Capture section found.')
                capture_state = 1

            # Try to find the data line
            elif capture_state == 1 and (matcher := category_re.search(line)):
                data = matcher.group('categories')

                log_obj(data, 'Data found')
                return data

    return ret_func


def fx_section_process_func(input_data: str):
    ret_data = input_data.split(',')[1:]
    ret_data = [item.strip() for item in ret_data]
    log_obj(ret_data, 'Return Categories')
    return ret_data


fx_color_presets_fetch_func = fx_section_fetch_func_builder(
    section_re=re.compile(r'^fx_color_presets\b\s*:'),
    category_re=re.compile(r'^\s*category\s*=\s*\$\{(?P<categories>[^}]*)}'))


fx_simulate_film_fetch_func = fx_section_fetch_func_builder(
    section_re=re.compile(r'^fx_simulate_film\b\s*:'),
    category_re=re.compile(r'^\s*category\s*=\s*\$\{(?P<categories>[^}]*)}'))


# RELEVANT STRING SECTION FROM CODE BELOW
""" 
fx_color_presets :
category=${arg\ 1+$1,abigailgonzalez,alexjordan,berat,cinematic,cinematic_travel,creative,ericellerbrock,filtergrade,hollywood,inavision,jtsemple,kylerholland,lutifyme,michaelezra,moviz,ohadperetz,oliviosarikas,on1,picturefx,pixelmator,pixlsus,purple11,rocketstock,shamoonabbasi,smallhd,toddblankenship,youssefhossam,others}
"""  # noqa

""" 
fx_simulate_film :
category=${arg\ 1+$1,bw,instant_consumer,instant_pro,fujixtransiii,negative_color,negative_new,negative_old,print,colorslide}
"""  # noqa

################################################################################

#########################################
#  === UNDERSCORE FX CLUTS CAPTURE ===  #
#########################################


def underscore_fx_cluts_fetch_func(fh: io.TextIOWrapper) -> list[str]:
    """
    Captures the lines starting with _fx_cluts and the line immediately after
    in the file. Bash equivalent is something like:

    `cat updateXXX.gmic | grep -A 1 -i '^_fx_cluts.*'` 

    :param fh: The file handle to the GMIC update file
    :type fh: io.TextIOWrapper
    :return: List of lines from the file to be processed.
    :rtype: list[str]
    """
    lines = []

    capture = False
    for line in fh:

        # Capture only the line after a given data line.
        if capture:
            lines.append(line)
            capture = False
        elif line.startswith('_fx_cluts'):
            lines.append(line)
            capture = True

    log_obj(lines, 'Underscore FX cluts lines found')
    return lines


def underscore_fx_cluts_process_func(fetch_data: list[str]) -> dict[str, list[str]]:
    """Process the lines from the _fx_cluts search into clut IDs by category.

    :param fetch_data: The strings captured from the update file
    :type fetch_data: list[str]
    :return: A list of luts by category ID.
    :rtype: dict[str, list[str]]
    """
    category_name_re = re.compile(r'^_fx_cluts_(?P<category>[^\s]+)\s.*')
    category_items_re = re.compile(r'^u (?P<cluts>.*)$')

    ret_data = {}

    cur_category = None
    for line in fetch_data:
        if cur_category:
            matcher = category_items_re.search(line)
            if matcher:
                category_list = matcher.group('cluts').split(',')
                trimmed_list = [item.strip() for item in category_list]
                ret_data[cur_category] = trimmed_list
                cur_category = None

        elif (matcher := category_name_re.search(line)):
            cur_category = matcher.group('category')

    log_obj(ret_data, 'Underscore FX cluts base data found')
    return ret_data


def underscore_fx_cluts_post_process_func(processed_data: dict[str, list[str]]) -> dict[str, list[str]]:
    """Post-processing function for the data processed from the section. In this
    case, mostly handles key replacement.

    :param processed_data: Data from the process function for the section.
    :type processed_data: dict[str, list[str]]
    :return: Cleaned up data.
    :rtype: dict[str, list[str]]
    """
    yaml_io = io.StringIO(REMAP_UNDERSCORE_CLUTS_YAML)
    remapping_data = yaml.safe_load(yaml_io)
    log_obj(remapping_data, 'Re-map Data')

    ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

    def fix_lut_name(lut_name):
        """Handles fixing any single given LUT's name"""
        if lut_name in remapping_data:
            return remapping_data[lut_name]
        return lut_name

    ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

    def fix_all_lut_names(lut_names):
        """Handles fixing all of the LUTs."""
        return [fix_lut_name(lut) for lut in lut_names]

    ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

    ret_data = {
        category: fix_all_lut_names(luts)
        for category, luts in processed_data.items()
    }

    log_obj(ret_data, 'Underscore FX cluts fixed data')
    return ret_data


# RELEVANT STRING SECTION FROM CODE BELOW
""" 
$ cat update321.gmic | grep -A 1 -i '^_fx_cluts.*'
_fx_cluts_abigailgonzalez :
u blade_runner,blue_house,blue_ice,caribe,cinema,cinema_2,cinema_3,cinema_4,cinema_5,cinema_noir,cinematic_for_flog,day_4nite,eterna_for_flog,filmic,fuji_hdr,goldengate,matrix,monochrome_1,monochrome_2,old_west,science_fiction
_fx_cluts_alexjordan :
u action_magenta_01,action_red_01,adventure_1453,agressive_highligjtes_recovery_5,bleech_bypass_green,bleech_bypass_yellow_01,blue_dark,blue_shadows_01,bright_green_01,brownish,colorful_0209,conflict_01,contrast_with_highlights_protection,contrasty_afternoon,contrasty_green,cross_process_cp_130,cross_process_cp_14,cross_process_cp_15,cross_process_cp_16,cross_process_cp_18,cross_process_cp_3,cross_process_cp_4,cross_process_cp_6,dark_green_02,dark_green_1,dark_place_01,dream_1,dream_85,faded_retro_01,faded_retro_02,film_0987,film_9879,film_high_contrast,flat_30,green_2025,green_action,green_afternoon,green_conflict,green_day_01,green_day_02,green_g_09,green_indoor,green_light,harsh_day,harsh_sunset,highlights_protection,indoor_blue,low_contrast_blue,low_key_01,magenta_day,magenta_day_01,magenta_dream,memories,moonlight_01,mostly_blue,muted_01,night_01,only_red,only_red_and_blue,operation_yellow,orange_dark_4,orange_dark_7,orange_dark_look,orange_underexposed,protect_highlights_01,red_afternoon_01,red_day_01,red_dream_01,retro_brown_01,retro_magenta_01,retro_yellow_01,saturated_blue,smart_contrast,subtle_blue,subtle_green,yellow_55b,yellow_film_01
_fx_cluts_berat :
u brownbm,cineblue,cinebm4k,goldentime,green_and_orange,monochrome,sevsuz,sunlightlove,western,westernlut2
_fx_cluts_cinematic :
u deep,dimension,enchanted,flavin,frosted,shine,ultra_water,wipe
_fx_cluts_cinematic_travel :
u blue_cold_fade,bright_teal_orange,bright_warm,clear_teal_fade,cold_clear_blue,cold_clear_blue_1,deep_blue,deep_dark_warm,deep_high_contrast,deep_teal_fade,deep_warm_fade,faded_green,greenish_contrasty,greenish_fade,greenish_fade_1,hard_teal_orange,neutral_teal_orange,neutral_warm_fade,smooth_clear,smooth_green_orange,smooth_teal_orange,teal_fade,very_warm_greenish,warm_dark_contrasty,warm_fade,warm_fade_1,warm_neutral,warm_sunset_red,warm_teal
_fx_cluts_creative :
u anime,bleachbypass_1,bleachbypass_2,bleachbypass_3,bleachbypass_4,candlelight,colornegative,crispwarm,crispwinter,dropblues,edgyember,fallcolors,foggynight,futuristicbleak_1,futuristicbleak_2,futuristicbleak_3,futuristicbleak_4,horrorblue,latesunset,moonlight,nightfromday,redblueyellow,smokey,softwarming,tealmagentagold,tealorange,tealorange_1,tealorange_2,tealorange_3,tensiongreen_1,tensiongreen_2,tensiongreen_3,tensiongreen_4
_fx_cluts_ericellerbrock :
u avalanche,black_star,helios,hydracore,hypnosis,killstreak,nemesis,night_blade_4,paladin,seringe_4,serpent,terra_4,victory,yellowstone
_fx_cluts_filtergrade :
u fgcinebasic,fgcinebright,fgcinecold,fgcinedrama,fgcinetealorange_1,fgcinetealorange_2,fgcinevibrant,fgcinewarm
_fx_cluts_hollywood :
u 12_years_a_slave,1917,ad_astra,aladdin,ant-man,aquaman,avengers_endgame,baby_driver,bad_boys_for_life,beauty_and_the_beast,black_panther,bohemian_rhapsody,bombshell,captain_marvel,city_of_god,creed_2,doctor_strange,dunkirk,fight_club,ford_v_ferrari,green_book,greyhound,i_tonya,inception,jojo_rabbit,joker,jumanji_the_next_level,jurassic_world_fallen_kingdom,justice_league,kingsman_the_golden_circle,knives_out,la_la_land,little_women,logan,mad_max_fury_road,marriage_story,moonlight_2,mother!,no_time_to_die,once_upon_a_time_in_hollywood,parasite,pirates_of_the_caribbean,rocketman,separation,sicario,spider-man_far_from_home,spotlight,star_wars_the_rise_of_skywalker,sully,tenet,the_dark_knight,the_darkest_hour,the_gentelmen,the_grand_budapest_hotel,the_hurt_locker,the_irishman,the_lighthouse,the_lobster,the_martian,the_revenant,the_shape_of_water,the_social_network,the_two_popes,the_way_back,thor_ragnarok,top_gun_maverick,uncut_gems,underwater,venom,war_for_the_planet_of_the_apes,wolf_of_wall_street,wonder_woman,x-men_dark_phoenix,zombieland_double_tap
_fx_cluts_inavision :
u 7drk_21,bc_darkum,brown_mobster,cold_ice,dark_man_x,film_gb-19,formula_b,gremerta,hitman,jwick_21,london_nights,louetta,nightlife,vfb_21,vintage_mob
_fx_cluts_jtsemple :
u brightgreen,crispromance,crushin,frostedbeachpicnic,justpeachy,lateafternoonwanderlust,lushgreensummer,magentacoffee,minimalistcaffeination,mysticpurplesunset,nostalgiahoney,springmorning,toastedgarden,winterlighthouse
_fx_cluts_kylerholland :
u kh1,kh2,kh3,kh4,kh5,kh6,kh7,kh8,kh9,kh10
_fx_cluts_lutifyme :
u hackmanite,herderite,heulandite,hiddenite,hilutite,howlite,hypersthene
_fx_cluts_michaelezra :
u deepskintones2,deepskintones3
_fx_cluts_moviz :
u moviz_1,moviz_2,moviz_3,moviz_4,moviz_5,moviz_6,moviz_7,moviz_8,moviz_9,moviz_10,moviz_11,moviz_12,moviz_13,moviz_14,moviz_15,moviz_16,moviz_17,moviz_18,moviz_19,moviz_20,moviz_21,moviz_22,moviz_23,moviz_24,moviz_25,moviz_26,moviz_27,moviz_28,moviz_29,moviz_30,moviz_31,moviz_32,moviz_33,moviz_34,moviz_35,moviz_36,moviz_37,moviz_38,moviz_39,moviz_40,moviz_41,moviz_42,moviz_43,moviz_44,moviz_45,moviz_46,moviz_47,moviz_48
_fx_cluts_ohadperetz :
u cold_simplicity_2,d_o_1,retro_summer_3,subtle_yellow,teal_moonlight,true_colors_8,vintage_warmth_1
_fx_cluts_oliviosarikas :
u analog_film_1,atomic_pink,beach_aqua_orange,beach_faded_analog,bw_but_yellow,city_dust,dark_orange_teal,day_to_night_kings_blue,duotone_blue_red,faded_pink-ish,flat_blue_moon,honey_light,infrared_-_dust_pink,neutral_pump,shade_kings_ink,sunset_aqua_orange,sunset_intense_violet_blue,sunset_violet_mood,violet_taste
_fx_cluts_on1 :
u 2-strip-process,aqua,aqua_and_orange_dark,berlin_sky,blues,bw_1,bw_2,bw_3,bw_4,bw_5,bw_6,bw_7,bw_8,bw_9,bw_10,chrome_01,cinematic-1,cinematic-2,cinematic-3,cinematic-4,cinematic-5,cinematic-6,cinematic-7,cinematic-8,cinematic-9,cinematic-10,classic_teal_and_orange,earth_tone_boost,fade_to_green,film_print_01,film_print_02,french_comedy,green_blues,green_yellow,landscape_1,landscape_2,landscape_3,landscape_4,landscape_5,landscape_6,landscape_7,landscape_8,landscape_9,landscape_10,lc_1,lc_2,lc_3,lc_4,lc_5,lc_6,lc_7,lc_8,lc_9,lc_10,moody_1,moody_2,moody_3,moody_4,moody_5,moody_6,moody_7,moody_8,moody_9,moody_10,nw-1,nw-2,nw-3,nw-4,nw-5,nw-6,nw-7,nw-8,nw-9,nw-10,oranges,portrait_1,portrait_2,portrait_3,portrait_4,portrait_5,portrait_6,portrait_7,portrait_8,portrait_9,portrait_10,purple_2,reds,reds_oranges_yellows,studio_skin_tone_shaper,vintage_chrome
_fx_cluts_picturefx :
u analogfx_anno_1870_color,analogfx_old_style_i,analogfx_old_style_ii,analogfx_old_style_iii,analogfx_sepia_color,analogfx_soft_sepia_i,analogfx_soft_sepia_ii,faux_infrared_bw_1,faux_infrared_color_p2,faux_infrared_color_p3,faux_infrared_color_r0a,faux_infrared_color_r0b,faux_infrared_color_yp1,goldfx_bright_spring_breeze,goldfx_bright_summer_heat,goldfx_hot_summer_heat,goldfx_perfect_sunset_01min,goldfx_perfect_sunset_05min,goldfx_perfect_sunset_10min,goldfx_spring_breeze,goldfx_summer_heat,technicalfx_backlight_filter,zilverfx_bw_solarization,zilverfx_infrared,zilverfx_vintage_bw
_fx_cluts_pixelmator :
u black_white_01,black_white_02,black_white_03,black_white_04,black_white_05,black_white_06,pmcinematic_01,pmcinematic_02,pmcinematic_03,pmcinematic_04,pmcinematic_05,pmcinematic_06,pmcinematic_07,classic_films_01,classic_films_02,classic_films_03,classic_films_04,classic_films_05,landscape_01,landscape_02,landscape_03,landscape_04,landscape_05,modern_films_01,modern_films_02,modern_films_03,modern_films_04,modern_films_05,modern_films_06,modern_films_07,pmnight_01,pmnight_02,pmnight_03,pmnight_04,pmnight_05,urban_01,urban_02,urban_03,urban_04,urban_05,vintage_01,vintage_02,vintage_03,vintage_04,vintage_05
_fx_cluts_pixlsus :
u amstragram,amstragram+,autumn,cinematic_lady_bird,cinematic_mexico,dark_blues_in_sunlight,delicatessen,expired_69,fadedlook,faded_print,hypressen,magenta_yellow,metropolis,modern_film,newspaper,night_spy,progressen,prussian_blue,seventies_magazine,street,sweet_bubblegum,sweet_gelatto,taiga,tarraco,unknown,uzbek_bukhara,uzbek_marriage,uzbek_samarcande,velvetia,warm_vintage,whiter_whites
_fx_cluts_purple11 :
u good_morning,going_for_a_walk,nah,once_upon_a_time,serenity,passing_by,smooth_sailing,undeniable,undeniable2,urban_cowboy,well_see,you_can_do_it
_fx_cluts_rocketstock :
u arabica_12,ava_614,azrael_93,bourbon_64,byers_11,chemical_168,clayton_33,clouseau_54,cobi_3,contrail_35,cubicle_99,django_25,domingo_145,faded_47,folger_50,fusion_88,hyla_68,korben_214,lenox_340,lucky_64,mckinnon_75,milo_5,neon_770,paladin_1875,pasadena_21,pitaya_15,reeve_38,remy_24,sprocket_231,teigen_28,trent_18,tweed_71,vireo_37,zed_32,zeke_39
_fx_cluts_shamoonabbasi :
u city_7,coffee_44,date_39,day_for_night,denoiser_simple_40,desert_gold_37,directions_23,drop_green_tint_14,elegance_38,golden_night_softner_43,golden_sony_37,green_15,happyness_133,hlg_1_1,industrial_33,morning_6,morroco_16,night_king_141,rest_33,shadow_king_39,spy_29,thriller_2,turkiest_42,vintage_163,wooden_gold_20
_fx_cluts_smallhd :
u apocalypse_this_very_moment,bboyz_2,bob_ford,life_giving_tree,moonrise,saving_private_damon,the_matrices
_fx_cluts_others :
u 60s,60s_faded,60s_faded_alt,alien_green,black_and_white,bleach_bypass,blue_mono,cinematic_01,cinematic_02,cinematic_03,color_rich,faded,faded_alt,faded_analog,faded_extreme,faded_vivid,expired_fade,expired_polaroid,extreme,fade,faux_infrared,golden,golden_bright,golden_fade,golden_mono,golden_vibrant,green_mono,hong_kong,instantc,k_tone_vintage_kodachrome,light_blown,lomo,mono_tinted,muted_fade,mute_shift,natural_vivid,nostalgic,orange_tone,pink_fade,purple,retro,rotate_muted,rotate_vibrant,rotated,rotated_crush,smooth_cromeish,smooth_fade,soft_fade,solarized_color,solarized_color_2,summer,summer_alt,sunny,sunny_alt,sunny_warm,sunny_rich,super_warm,super_warm_rich,sutro_fx,vibrant,vibrant_alien,vibrant_contrast,vibrant_cromeish,vintage,vintage_alt,vintage_brighter,warm,warm_highlight,warm_yellow
_fx_cluts_toddblankenship :
u bluearchitecture,bluehour,coldchrome,crispautumn,darkandsomber,hardboost,longbeachmorning,lushgreen,magichour,naturalboost,orangeandblue,softblackandwhite,waves
_fx_cluts_youssefhossam :
u cinematic_forest,city,darkness,hallowen_dark,sea
--
_fx_cluts_bw :
u agfa_apx_100,agfa_apx_25,fuji_neopan_1600,fuji_neopan_acros_100,ilford_delta_100,ilford_delta_3200,ilford_delta_400,ilford_fp_4_plus_125,ilford_hp_5_plus_400,ilford_hps_800,ilford_pan_f_plus_50,ilford_xp_2,kodak_bw_400_cn,kodak_hie_hs_infra,kodak_t-max_100,kodak_t-max_3200,kodak_t-max_400,kodak_tri-x_400,polaroid_664,polaroid_667,polaroid_672,rollei_ir_400,rollei_ortho_25,rollei_retro_100_tonal,rollei_retro_80s
_fx_cluts_instant_consumer :
u polaroid_px-100uv+_cold_--,polaroid_px-100uv+_cold_-,polaroid_px-100uv+_cold,polaroid_px-100uv+_cold_+,polaroid_px-100uv+_cold_++,polaroid_px-100uv+_cold_+++,polaroid_px-100uv+_warm_--,polaroid_px-100uv+_warm_-,polaroid_px-100uv+_warm,polaroid_px-100uv+_warm_+,polaroid_px-100uv+_warm_++,polaroid_px-100uv+_warm_+++,polaroid_px-680_--,polaroid_px-680_-,polaroid_px-680,polaroid_px-680_+,polaroid_px-680_++,polaroid_px-680_cold_--,polaroid_px-680_cold_-,polaroid_px-680_cold,polaroid_px-680_cold_+,polaroid_px-680_cold_++,polaroid_px-680_cold_++_alt,polaroid_px-680_warm_--,polaroid_px-680_warm_-,polaroid_px-680_warm,polaroid_px-680_warm_+,polaroid_px-680_warm_++,polaroid_px-70_--,polaroid_px-70_-,polaroid_px-70,polaroid_px-70_+,polaroid_px-70_++,polaroid_px-70_+++,polaroid_px-70_cold_--,polaroid_px-70_cold_-,polaroid_px-70_cold,polaroid_px-70_cold_+,polaroid_px-70_cold_++,polaroid_px-70_warm_--,polaroid_px-70_warm_-,polaroid_px-70_warm,polaroid_px-70_warm_+,polaroid_px-70_warm_++,polaroid_time_zero_expired_---,polaroid_time_zero_expired_--,polaroid_time_zero_expired_-,polaroid_time_zero_expired,polaroid_time_zero_expired_+,polaroid_time_zero_expired_++,polaroid_time_zero_expired_cold_---,polaroid_time_zero_expired_cold_--,polaroid_time_zero_expired_cold_-,polaroid_time_zero_expired_cold
_fx_cluts_instant_pro :
u fuji_fp-100c_--,fuji_fp-100c_-,fuji_fp-100c,fuji_fp-100c_alt,fuji_fp-100c_+,fuji_fp-100c_++,fuji_fp-100c_++_alt,fuji_fp-100c_+++,fuji_fp-100c_cool_--,fuji_fp-100c_cool_-,fuji_fp-100c_cool,fuji_fp-100c_cool_+,fuji_fp-100c_cool_++,fuji_fp-100c_negative_--,fuji_fp-100c_negative_-,fuji_fp-100c_negative,fuji_fp-100c_negative_+,fuji_fp-100c_negative_++,fuji_fp-100c_negative_++_alt,fuji_fp-100c_negative_+++,fuji_fp-3000b_--,fuji_fp-3000b_-,fuji_fp-3000b,fuji_fp-3000b_+,fuji_fp-3000b_++,fuji_fp-3000b_+++,fuji_fp-3000b_hc,fuji_fp-3000b_negative_--,fuji_fp-3000b_negative_-,fuji_fp-3000b_negative,fuji_fp-3000b_negative_+,fuji_fp-3000b_negative_++,fuji_fp-3000b_negative_+++,fuji_fp-3000b_negative_early,polaroid_665_--,polaroid_665_-,polaroid_665,polaroid_665_+,polaroid_665_++,polaroid_665_negative_-,polaroid_665_negative,polaroid_665_negative_+,polaroid_665_negative_hc,polaroid_669_--,polaroid_669_-,polaroid_669,polaroid_669_+,polaroid_669_++,polaroid_669_+++,polaroid_669_cold_--,polaroid_669_cold_-,polaroid_669_cold,polaroid_669_cold_+,polaroid_690_--,polaroid_690_-,polaroid_690,polaroid_690_+,polaroid_690_++,polaroid_690_cold_--,polaroid_690_cold_-,polaroid_690_cold,polaroid_690_cold_+,polaroid_690_cold_++,polaroid_690_warm_--,polaroid_690_warm_-,polaroid_690_warm,polaroid_690_warm_+,polaroid_690_warm_++
_fx_cluts_fujixtransiii :
u fuji_xtrans_iii_acros,fuji_xtrans_iii_acros+g,fuji_xtrans_iii_acros+r,fuji_xtrans_iii_acros+ye,fuji_xtrans_iii_astia,fuji_xtrans_iii_classic_chrome,fuji_xtrans_iii_mono,fuji_xtrans_iii_mono+g,fuji_xtrans_iii_mono+r,fuji_xtrans_iii_mono+ye,fuji_xtrans_iii_pro_neg_hi,fuji_xtrans_iii_pro_neg_std,fuji_xtrans_iii_provia,fuji_xtrans_iii_sepia,fuji_xtrans_iii_velvia
_fx_cluts_negative_color :
u agfa_ultra_color_100,agfa_vista_200,fuji_superia_200,fuji_superia_hg_1600,fuji_superia_reala_100,fuji_superia_x-tra_800,kodak_ektar_100,kodak_elite_100_xpro,kodak_elite_color_200,kodak_elite_color_400,kodak_portra_160_nc,kodak_portra_160_vc,lomography_redscale_100
_fx_cluts_negative_new :
u fuji_160c_-,fuji_160c,fuji_160c_+,fuji_160c_++,fuji_400h_-,fuji_400h,fuji_400h_+,fuji_400h_++,fuji_800z_-,fuji_800z,fuji_800z_+,fuji_800z_++,ilford_hp_5_-,ilford_hp_5,ilford_hp_5_+,ilford_hp_5_++,kodak_portra_160_-,kodak_portra_160,kodak_portra_160_+,kodak_portra_160_++,kodak_portra_400_-,kodak_portra_400,kodak_portra_400_+,kodak_portra_400_++,kodak_portra_800_-,kodak_portra_800,kodak_portra_800_+,kodak_portra_800_++,kodak_portra_800_hc,kodak_tmax_3200_-,kodak_tmax_3200,kodak_tmax_3200_+,kodak_tmax_3200_++,kodak_tmax_3200_alt,kodak_tri-x_400_-,kodak_tri-x_400,kodak_tri-x_400_+,kodak_tri-x_400_++,kodak_tri-x_400_alt
_fx_cluts_negative_old :
u ilford_delta_3200_-,ilford_delta_3200,ilford_delta_3200_+,ilford_delta_3200_++,fuji_neopan_1600_-,fuji_neopan_1600,fuji_neopan_1600_+,fuji_neopan_1600_++,fuji_superia_100_-,fuji_superia_100,fuji_superia_100_+,fuji_superia_100_++,fuji_superia_400_-,fuji_superia_400,fuji_superia_400_+,fuji_superia_400_++,fuji_superia_800_-,fuji_superia_800,fuji_superia_800_+,fuji_superia_800_++,fuji_superia_1600_-,fuji_superia_1600,fuji_superia_1600_+,fuji_superia_1600_++,kodak_portra_160_nc_-,kodak_portra_160_nc,kodak_portra_160_nc_+,kodak_portra_160_nc_++,kodak_portra_160_vc_-,kodak_portra_160_vc,kodak_portra_160_vc_+,kodak_portra_160_vc_++,kodak_portra_400_nc_-,kodak_portra_400_nc,kodak_portra_400_nc_+,kodak_portra_400_nc_++,kodak_portra_400_uc_-,kodak_portra_400_uc,kodak_portra_400_uc_+,kodak_portra_400_uc_++,kodak_portra_400_vc_-,kodak_portra_400_vc,kodak_portra_400_vc_+,kodak_portra_400_vc_++
_fx_cluts_print :
u fuji_3510_constlclip,fuji_3510_constlmap,fuji_3510_cuspclip,fuji_3513_constlclip,fuji_3513_constlmap,fuji_3513_cuspclip,kodak_2383_constlclip,kodak_2383_constlmap,kodak_2383_cuspclip,kodak_2393_constlclip,kodak_2393_constlmap,kodak_2393_cuspclip
_fx_cluts_colorslide :
u agfa_precisa_100,fuji_astia_100f,fuji_fp_100c,fuji_provia_100f,fuji_provia_400f,fuji_provia_400x,fuji_sensia_100,fuji_superia_200_xpro,fuji_velvia_50,fuji_astia_100_generic,fuji_provia_100_generic,fuji_velvia_100_generic,kodak_kodachrome_64_generic,kodak_ektachrome_100_vs_generic,kodak_e-100_gx_ektachrome_100,kodak_ektachrome_100_vs,kodak_elite_chrome_200,kodak_elite_chrome_400,kodak_elite_extracolor_100,kodak_kodachrome_200,kodak_kodachrome_25,kodak_kodachrome_64,lomography_x-pro_slide_200,polaroid_669,polaroid_690,polaroid_polachrome
"""  # noqa


################################################################################

###################################
#  === GUI PACK INFO CAPTURE ===  #
###################################

def gui_info_fetch_func_builder(section_name: str, category_name: str, preset_name: str) -> typing.Callable:
    """
    Builds the function for fetching information from the GUI sections for the
    LUT info

    :param section_name: The marker indicating start of section. Looks like:
        #@gui <section_name>:fx_simulate_film,fx_simulate_film_preview(1)+
    :type section_name: str
    :param category_name: The marker indicating start of category. Looks like:
        #@gui :<category_name>=choice{...
    :type category_name: str
    :param preset_name: The marker indicating the start of the list of the list
        of presets. Looks like:
        #@gui :Preset=choice{...
    :type preset_name: str
    :return: A function that will fetch the relevant lines from the file
        and load them into section. 
    :rtype: typing.Callable
    """

    ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

    def ret_func(fh: io.TextIOWrapper) -> dict[str, typing.Any]:
        """Handles the actual logic of fetching the data.

        :param fh: The file handle to the .gmic update file.
        :type fh: io.TextIOWrapper
        :return: Dictionary containing the important elements.
        :rtype: dict[str, typing.Any]
        """
        ## State Machine states ##

        CaptureState = Enum(
            'CaptureState',
            [
                'START',
                'SECTION_STARTED',
                'CATEGORY_STARTED',
                'PRESET_SEARCH',
                'PRESET_STARTED',
                'PRESET_BRACKET_STARTED'
            ]
        )

        ## Regular Expressions ##

        gui_str = r'^#@gui'

        gui_matcher = re.compile(gui_str)

        section_matcher_start = re.compile(
            gui_str +
            r'.*' +
            section_name +
            r':(?P<remainder>.*)'
        )

        category_matcher_start = re.compile(
            gui_str +
            r'.*' +
            r':' +
            category_name +
            r'=choice{(?P<remainder>[^}]*)')
        category_matcher_end = re.compile(r'^(?P<remainder>[^}]*)}.*')

        preset_matcher_start = re.compile(
            gui_str +
            r'.*' +
            r':' +
            preset_name +
            r'=choice\((?P<remainder>[^\)]*)')
        preset_matcher_end = re.compile(r'^(?P<remainder>[^\)]*)\)_[0-9]')

        preset_matcher_bracket_start = re.compile(
            gui_str +
            r'.*' +
            r':' +
            preset_name +
            r'=choice{(?P<remainder>[^}]*)')
        preset_matcher_bracket_end = re.compile(
            r'^(?P<remainder>[^}]*)}_[0-9]')

        ## Logic start ##

        ret_info = {}

        capture_state = CaptureState.START

        category_lines = None
        preset_groups_lines = []
        preset_lines = None

        for line in fh:
            if (capture_state == CaptureState.START
                    and (matcher := section_matcher_start.search(line))):
                capture_state = CaptureState.SECTION_STARTED
                ret_info['section_funcs'] = matcher.group('remainder')

            # Looking for LUTs Pack lines.
            elif (capture_state == CaptureState.SECTION_STARTED
                    and (matcher := category_matcher_start.search(line))):
                capture_state = CaptureState.CATEGORY_STARTED
                category_lines = [matcher.group('remainder')]

                # In case only one line of categories.
                if category_matcher_end.search(line):
                    ret_info['category_info'] = ''.join(category_lines)
                    category_lines = None
                    capture_state = CaptureState.PRESET_SEARCH

            # Finishing LUTs pack lines
            elif capture_state == CaptureState.CATEGORY_STARTED:
                if (matcher := category_matcher_end.search(line)):
                    category_lines.append(matcher.group('remainder'))
                    ret_info['category_info'] = ''.join(category_lines)
                    category_lines = None
                    capture_state = CaptureState.PRESET_SEARCH
                else:
                    category_lines.append(line.strip())

            # Waiting for the preset to capture.
            elif (capture_state == CaptureState.PRESET_SEARCH
                    and gui_matcher.search(line)):

                if (matcher := preset_matcher_start.search(line)):
                    capture_state = CaptureState.PRESET_STARTED
                    preset_lines = [matcher.group('remainder')]
                    if preset_matcher_end.search(line):
                        # can loop back to wait for preset if one-liner..
                        preset_groups_lines.append(''.join(preset_lines))
                        preset_lines = None
                        capture_state = CaptureState.PRESET_SEARCH

                elif (matcher := preset_matcher_bracket_start.search(line)):
                    # _logger.debug('GOING 5: %s', line)
                    capture_state = CaptureState.PRESET_BRACKET_STARTED
                    preset_lines = [matcher.group('remainder')]
                    if preset_matcher_bracket_end.search(line):
                        # can loop back to wait for preset if one-liner..
                        preset_groups_lines.append(''.join(preset_lines))
                        preset_lines = None
                        capture_state = CaptureState.PRESET_SEARCH

                else:  # We are probably out of items to capture. Can finish up
                    ret_info['preset_info'] = preset_groups_lines
                    preset_groups_lines = None
                    capture_state = CaptureState.START

            # Waiting for end of preset started with (
            elif capture_state == CaptureState.PRESET_STARTED:
                # _logger.debug('STATE 4: %s', line)
                if (matcher := preset_matcher_end.search(line)):
                    preset_lines.append(matcher.group('remainder'))
                    preset_groups_lines.append(''.join(preset_lines))
                    preset_lines = None
                    capture_state = CaptureState.PRESET_SEARCH
                else:
                    preset_lines.append(line.strip())

            # Waiting for end of preset started with {
            elif capture_state == CaptureState.PRESET_BRACKET_STARTED:
                # _logger.debug('STATE 5: %s', line)
                if (matcher := preset_matcher_bracket_end.search(line)):
                    preset_lines.append(matcher.group('remainder'))
                    preset_groups_lines.append(''.join(preset_lines))
                    preset_lines = None
                    capture_state = CaptureState.PRESET_SEARCH
                else:
                    preset_lines.append(line.strip())

        log_obj(ret_info, 'GUI Pack Info Fetched Data')
        return ret_info

    ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

    return ret_func


gui_luts_pack_info_fetch_func = gui_info_fetch_func_builder(
    r'Color Presets',
    r'LUTs Pack',
    r'Preset'
)


gui_simulate_film_info_fetch_func = gui_info_fetch_func_builder(
    r'Simulate Film',
    r'Category',
    r'Preset'
)


def gui_info_process_func(captured: dict[str, typing.Any]) -> typing.Any:
    """Process the data from the fetch info for GUI into usable data

    :param captured: The data captured from the fetch function
    :type captured: dict[str, typing.Any]
    :return: The data as processed.
    :rtype: typing.Any
    """

    # example: "Category Name (25)"
    category_name_matcher = re.compile(
        r'^(?P<name>.*)\s\((?P<count>[0-9]+)\).*')

    ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

    def decode_category_info_fixer(cur_item):
        if (matcher := category_name_matcher.search(cur_item)):
            return {
                'name': matcher.group('name'),
                'expected_count': int(matcher.group('count'))
            }
        else:
            return {'name': cur_item, 'expected_count': None}

    ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

    def decode_category_info(category_str):
        categories = category_str.split(',')
        if categories[0].isnumeric():
            categories = categories[1:]

        # categories = category_str.split(',')
        categories = [item.strip(' "') for item in categories]
        categories = [decode_category_info_fixer(item)
                      for item in categories]
        return categories

    ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

    def decode_preset_info(preset_strs):
        ret_lists = []

        for preset_list in preset_strs:
            # Need skip the integer count, all collage, and none
            presets = preset_list.split(',')[3:]
            presets = [item.strip(' "') for item in presets]
            ret_lists.append({'presets': presets, 'len': len(presets)})

        return ret_lists

    ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

    ret_data = {}

    # Take care of category info first.
    # Skip the first item, should just be a counter.
    ret_data['section_funcs'] = [item.strip()
                                 for item in captured['section_funcs'].split(',')]
    ret_data['categories'] = decode_category_info(captured['category_info'])
    ret_data['presets'] = decode_preset_info(captured['preset_info'])

    log_obj(ret_data, 'GUI pack info processed data')
    return ret_data


# RELEVANT STRING SECTION FROM CODE BELOW
"""
#@gui Color Presets:fx_color_presets,fx_color_presets_preview(1)+
#@gui :LUTs Pack=choice{20,"Abigail Gonzalez (21)","Alex Jordan (81)","Berat (10)","Cinematic (8)","Cinematic Travel (29)","Creative Pack (33)","Eric Ellerbrock (14)","FilterGrade Cinematic (8)","Hollywood Movies (74)","InAvision (15)","J.T. Semple (14)","Kyler Holland (10)","Lutify.Me (7)","Michael Ezra (2)","Moviz (48)","Ohad Peretz (7)","Olivio Sarikas (19)","ON1 Photography (90)","PictureFX (25)","Pixelmator (45)","PIXLS.US (31)","Purple11 (12)","RocketStock (35)","Shamoon Abbasi (25)","SmallHD Movie Look (7)","Todd Blankenship (13)","Youssef Hossam (5)","Others (69)"}
#@gui :Preset=choice(1,"All [Collage]","None","Blade Runner","Blue House","Blue Ice","Caribe","Cinema","Cinema 2","Cinema 3","Cinema 4","Cinema 5","Cinema Noir","Cinematic for Flog","Day4Nite","Eterna for Flog","Filmic","Fuji HDR","Golden Gate","Matrix","Monochrome 1","Monochrome 2","Old West","Science Fiction")_0
#@gui :Preset=choice(1,"All [Collage]","None","Action Magenta 01","Action Red 01","Adventure 1453","Aggressive Highlights Recovery 5","Bleech Bypass Green","Bleech Bypass Yellow 01","Blue Dark","Blue Shadows 01","Bright Green 01","Brownish","Colorful 0209","Conflict 01","Contrast with Highlights Protection","Contrasty Afternoon","Contrasty Green","Cross Process CP 130","Cross Process CP 14","Cross Process CP 15","Cross Process CP 16","Cross Process CP 18","Cross Process CP 3","Cross Process CP 4","Cross Process CP 6","Dark Green 02","Dark Green 1","Dark Place 01","Dream 1","Dream 85","Faded Retro 01","Faded Retro 02","Film 0987","Film 9879","Film Highlight Contrast","Flat 30","Green 2025","Green Action","Green Afternoon","Green Conflict","Green Day 01","Green Day 02","Green G09","Green Indoor","Green Light","Harsh Day","Harsh Sunset","Highlights Protection","Indoor Blue","Low Contrast Blue","Low Key 01","Magenta Day","Magenta Day 01","Magenta Dream","Memories","Moonlight 01","Mostly Blue","Muted 01","Night 01","Only Red","Only Red and Blue","Operation Yellow","Orange Dark 4","Orange Dark 7","Orange Dark Look","Orange Underexposed","Protect Highlights 01","Red Afternoon 01","Red Day 01","Red Dream 01","Retro Brown 01","Retro Magenta 01","Retro Yellow 01","Saturated Blue","Smart Contrast","Subtle Blue","Subtle Green","Yellow 55B","Yellow Film 01")_0
#@gui :Preset=choice(1,"All [Collage]","None","Brown BM","Cine Blue","Cine BM4k","Golden Time","Green and Orange","Monochrome","Sevsuz","Sunlight Love","Western","Western Lut 2")_0
#@gui :Preset=choice(1,"All [Collage]","None","Deep","Dimension","Enchanted","Flavin","Frosted","Shine","Ultra Water","Wipe")_0
#@gui :Preset=choice(1,"All [Collage]","None","Blue Cold Fade","Bright Teal Orange","Bright Warm","Clear Teal Fade","Cold Clear Blue","Cold Clear Blue 1","Deep Blue","Deep Dark Warm","Deep High Contrast","Deep Teal Fade","Deep Warm Fade","Faded Green","Greenish Contrasty","Greenish Fade","Greenish Fade 1","Hard Teal Orange","Neutral Teal Orange","Neutral Warm Fade","Smooth Clear","Smooth Green Orange","Smooth Teal Orange","Teal Fade","Very Warm Greenish","Warm Dark Contrasty","Warm Fade","Warm Fade 1","Warm Neutral","Warm Sunset Red","Warm Teal")_0
#@gui :Preset=choice(1,"All [Collage]","None","Anime","Bleach Bypass 1","Bleach Bypass 2","Bleach Bypass 3","Bleach Bypass 4","Candle Light","Color Negative","Crisp Warm","Crip Winter","Drop Blues","Edgy Ember","Fall Colors","Foggy Night","Futuristic Bleak 1","Futuristic Bleak 2","Futuristic Bleak 3","Futuristic Bleak 4","Horror Blue","Late Sunset","Moonlight","Night From Day","Red Blue Yellow","Smokey","Soft Warming","Teal Magenta Gold","Teal Orange","Teal Orange 1","Teal Orange 2","Teal Orange 3","Tension Green 1","Tension Green 2","Tension Green 3","Tension Green 4")_0
#@gui :Preset=choice(1,"All [Collage]","None","Avalanche","Black Star","Helios","Hydracore","Hypnosis","Killstreak","Nemesis","Night Blade 4","Paladin","Seringe 4","Serpent","Terra 4","Victory","Yellowstone")_0
#@gui :Preset=choice(1,"All [Collage]","None","Cine Basic","Cine Bright","Cine Cold","Cine Drama","Cine Teal Orange 1","Cine Teal Orange 2","Cine Vibrant","Cine Warm")_0
#@gui :Preset=choice(1,"All [Collage]","None","12 Years a Slave","1917","Ad Astra","Aladdin","Ant-Man","Aquaman","Avengers Endgame","Baby Driver","Bad Boys for Life","Beauty and the Beast","Black Panther","Bohemian Rhapsody","Bombshell","Captain Marvel","City of God","Creed 2","Doctor Strange","Dunkirk","Fight Club","Ford V Ferrari","Green Book","Greyhound","Inception","I Tonya","Jojo Rabbit","Joker ","Jumanji The Next Level","Jurassic World Fallen Kingdom","Justice League","Kingsman The Golden Circle","Knives Out","La La Land","Little Women","Logan","Mad Max Fury Road","Marriage Story","Moonlight","Mother!","No Time to Die","Once Upon a Time in Hollywood","Parasite","Pirates of the Caribbean","Rocketman","Separation","Sicario","Spider-Man Far From Home","Spotlight","Star Wars The Rise of Skywalker","Sully","TENET","The Darkest Hour","The Dark Knight","The Gentelmen","The Grand Budapest Hotel","The Hurt Locker","The Irishman","The Lighthouse","The Lobster","The Martian","The Revenant","The Shape of Water","The Social Network","The Two Popes","The Way Back","Thor Ragnarok","Top Gun Maverick","Uncut Gems","Underwater","Venom","War for the Planet of the Apes","Wolf of Wall Street","Wonder Woman","X-Men Dark Phoenix","Zombieland Double Tap")_0
#@gui :Preset=choice(1,"All [Collage]","None","7Drk21","BC Darkum","Brown Mobster","Cold Ice","Dark Man X","Film GB-19","Formula B","Gremerta","Hitman","J. Wick 21","London Nights","Louetta","Nightlife","VFB 21","Vintage Mob")_0
#@gui :Preset=choice(1,"All [Collage]","None","Bright Green","Crisp Romance","Crushin","Frosted Beach Picnic","Just Peachy","Late Afternoon Wanderlust","Lush Green Summer","Magenta Coffee","Minimalist Caffeination","Mystic Purple Sunset","Nostalgia Honey","Spring Morning","Toasted Garden","Winter Lighthouse")_0
#@gui :Preset=choice(1,"All [Collage]","None","KH 1","KH 2","KH 3","KH 4","KH 5","KH 6","KH 7","KH 8","KH 9","KH 10")_0
#@gui :Preset=choice(1,"All [Collage]","None","Hackmanite","Herderite","Heulandite","Hiddenite","Hilutite","Howlite","Hypersthene")_0
#@gui :Preset=choice(1,"All [Collage]","None","Deep Skin Tones 2","Deep Skin Tones 3")_0
#@gui :Preset=choice(1,"All [Collage]","None","Moviz 1","Moviz 2","Moviz 3","Moviz 4","Moviz 5","Moviz 6","Moviz 7","Moviz 8","Moviz 9","Moviz 10","Moviz 11","Moviz 12","Moviz 13","Moviz 14","Moviz 15","Moviz 16","Moviz 17","Moviz 18","Moviz 19","Moviz 20","Moviz 21","Moviz 22","Moviz 23","Moviz 24","Moviz 25","Moviz 26","Moviz 27","Moviz 28","Moviz 29","Moviz 30","Moviz 31","Moviz 32","Moviz 33","Moviz 34","Moviz 35","Moviz 36","Moviz 37","Moviz 38","Moviz 39","Moviz 40","Moviz 41","Moviz 42","Moviz 43","Moviz 44","Moviz 45","Moviz 46","Moviz 47","Moviz 48")_0
#@gui :Preset=choice(1,"All [Collage]","None","Cold Simplicity 2","D and O 1","Retro Summer 3","Subtle Yellow","Teal Moonlight","True Colors 8","Vintage Warmth 1")_0
#@gui :Preset=choice(1,"All [Collage]","None","Analog Film 1","Atomic Pink","Beach Aqua Orange","Beach Faded Analog","BW but Yellow","City Dust","Dark Orange Teal","Day to Night King's Blue","DuoTone Blue Red","Faded Pink-Ish","Flat Blue Moon","Honey Light","Infrared - Dust Pink","Neutral Pump","Shade King's Ink","Sunset Aqua Orange","Sunset Intense Violet Blue","Sunset Violet Mood","Violet Taste")_0
#@gui :Preset=choice(1,"All [Collage]","None","2-Strip Process","Aqua","Aqua and Orange Dark","Berlin Sky","Blues","Black & White-1","Black & White-2","Black & White-3","Black & White-4","Black & White-5","Black & White-6","Black & White-7","Black & White-8","Black & White-9","Black & White-10","Chrome 01","Cinematic-1","Cinematic-2","Cinematic-3","Cinematic-4","Cinematic-5","Cinematic-6","Cinematic-7","Cinematic-8","Cinematic-9","Cinematic-10","Classic Teal and Orange","Earth Tone Boost","Fade to Green","Film Print 01","Film Print 02","French Comedy","Green Blues","Green Yellow","Landscape-1","Landscape-2","Landscape-3","Landscape-4","Landscape-5","Landscape-6","Landscape-7","Landscape-8","Landscape-9","Landscape-10","Lifestyle & Commercial-1","Lifestyle & Commercial-2","Lifestyle & Commercial-3","Lifestyle & Commercial-4","Lifestyle & Commercial-5","Lifestyle & Commercial-6","Lifestyle & Commercial-7","Lifestyle & Commercial-8","Lifestyle & Commercial-9","Lifestyle & Commercial-10","Moody-1","Moody-2","Moody-3","Moody-4","Moody-5","Moody-6","Moody-7","Moody-8","Moody-9","Moody-10","Nature & Wildlife-1","Nature & Wildlife-2","Nature & Wildlife-3","Nature & Wildlife-4","Nature & Wildlife-5","Nature & Wildlife-6","Nature & Wildlife-7","Nature & Wildlife-8","Nature & Wildlife-9","Nature & Wildlife-10","Oranges","Portrait-1","Portrait-2","Portrait-3","Portrait-4","Portrait-5","Portrait-6","Portrait-7","Portrait-8","Portrait-9","Portrait10","Purple","Reds","Reds Oranges Yellows","Studio Skin Tone Shaper","Vintage Chrome")_0
#@gui :Preset=choice(1,"All [Collage]","None","AnalogFX - Anno 1870 Color","AnalogFX - Old Style I","AnalogFX - Old Style II","AnalogFX - Old Style III","AnalogFX - Sepia Color","AnalogFX - Soft Sepia I","AnalogFX - Soft Sepia II","PictureFX - Faux Infrared B&W1","PictureFX - Faux Infrared Color P2","PictureFX - Faux Infrared Color P3","PictureFX - Faux Infrared R0a","PictureFX - Faux Infrared R0b","PictureFX - Faux Infrared YP1","GoldFX - Bright Spring Breeze","GoldFX - Bright Summer Heat","GoldFX - Hot Summer Heat","GoldFX - Perfect Sunset 01min","GoldFX - Perfect Sunset 05min","GoldFX - Perfect Sunset 10min","GoldFX - Spring Breeze","GoldFX - Summer Heat","TechnicalFX - Backlight Filter","ZilverFX - B&W Solarization","ZilverFX - InfraRed","ZilverFX - Vintage B&W")_0
#@gui :Preset=choice(1,"All [Collage]","None","Black & White 01","Black & White 02","Black & White 03","Black & White 04","Black & White 05","Black & White 06","Cinematic 01","Cinematic 02","Cinematic 03","Cinematic 04","Cinematic 05","Cinematic 06","Cinematic 07","Classic Films 01","Classic Films 02","Classic Films 03","Classic Films 04","Classic Films 05","Landscape 01","Landscape 02","Landscape 03","Landscape 04","Landscape 05","Modern Films 01","Modern Films 02","Modern Films 03","Modern Films 04","Modern Films 05","Modern Films 06","Modern Films 07","Night 01","Night 02","Night 03","Night 04","Night 05","Urban 01","Urban 02","Urban 03","Urban 04","Urban 05","Vintage 01","Vintage 02","Vintage 03","Vintage 04","Vintage 05")_0
#@gui :Preset=choice(1,"All [Collage]","None","Amstragram","Amstragram+","Autumn","Cinematic Lady Bird","Cinematic Mexico","Dark Blues in Sunlight","Delicatessen","Expired 69","Faded Look","Faded Print","Hypressen","Magenta Yellow","Metropolis","Modern Film","Newspaper","Night Spy","Progressen","Prussian Blue","Seventies Magazine","Street","Sweet Bubblegum","Sweet Gelatto","Taiga","Tarraco","Unknown","Uzbek Bukhara","Uzbek Marriage","Uzbek Samarcande","Velvetia","Warm Vintage","Whiter Whites")_2
#@gui :Preset=choice(1,"All [Collage]","None","Going for a Walk","Good Morning","Nah","Once Upon a Time","Passing By","Serenity","Smooth Sailing","Undeniable","Undeniable 2","Urban Cowboy","We'll See","You Can Do It")_0
#@gui :Preset=choice(1,"All [Collage]","None","Arabica 12","Ava 614","Azrael 93","Bourbon 64","Byers 11","Chemical 168","Clayton 33","Clouseau 54","Cobi 3","Contrail 35","Cubicle 99","Django 25","Domingo 145","Faded 47","Folger 50","Fusion 88","Hyla 68","Korben 214","Lenox 340","Lucky 64","McKinnon 75","Milo 5","Neon 770","Paladin 1875","Pasadena 21","Pitaya 15","Reeve 38","Remy 24","Sprocket 231","Teigen 28","Trent 18","Tweed 71","Vireo 37","Zed 32","Zeke 39")_0
#@gui :Preset=choice(1,"All [Collage]","None","City 7","Coffee 44","Date 39","Day for Night","Denoise Simple 40","Desert Gold 37","Directions 23","Drop Green Tint 14","Elegance 38","Golden Night Softner 43","Golden Sony 37","Green 15","Happyness 133","HLG 1","Industrial 33","Morning 6","Morroco 16","Night King 141","Rest 33","Shadow King 39","Spy 29","Thriller 2","Turkiest 42","Vintage 163","Wooden Gold 20")_0
#@gui :Preset=choice(1,"All [Collage]","None","Apocalypse This Very Moment","B-Boyz 2","Bob Ford","Life Giving Tree","Moonrise","Saving Private Damon","The Matrices")_0
#@gui :Preset=choice(1,"All [Collage]","None","Blue Architecture","Blue Hour","Cold Chrome","Crisp Autumn","Dark And Somber","Hard Boost","Long Beach Morning","Lush Green","Magic Hour","Natural Boost","Orange And Blue","Soft Black And White","Waves")_0
#@gui :Preset=choice(1,"All [Collage]","None","Cinematic Forest","City","Darkness","Hallowen Dark","Sea")_0
#@gui :Preset=choice{1,"All [Collage]","None","60's","60's (faded)","60's (faded Alt)","Alien Green","Black & White","Bleach Bypass","Blue Mono","Cinematic-01","Cinematic-02","Cinematic-03","Color (rich)","Faded","Faded (alt)","Faded (analog)","Faded (extreme)","Faded (vivid)","Expired (fade)","Expired (polaroid)","Extreme","Fade","Faux Infrared","Golden","Golden (bright)","Golden (fade)","Golden (mono)","Golden (vibrant)","Green Mono","Hong Kong","Instant-C","K-Tone Vintage Kodachrome","Light (blown)","Lomo","Mono Tinted","Muted Fade","Mute Shift","Natural (vivid)","Nostalgic","Orange Tone","Pink Fade","Purple","Retro","Rotate (muted)","Rotate (vibrant)","Rotated","Rotated (crush)","Smooth Crome-Ish","Smooth Fade","Soft Fade","Solarize Color","Solarized Color2","Summer","Summer (alt)","Sunny","Sunny (alt)","Sunny (warm)","Sunny (rich)","Super Warm","Super Warm (rich)","Sutro FX","Vibrant","Vibrant (alien)","Vibrant (contrast)","Vibrant (crome-Ish)","Vintage","Vintage (alt)","Vintage (brighter)","Warm","Warm (highlight)","Warm (yellow)"}_0
"""  # noqa

"""
#@gui Simulate Film:fx_simulate_film,fx_simulate_film_preview(1)+
#@gui :Category=choice{"Black & White (25)","Instant [Consumer] (54)","Instant [Pro] (68)","Fuji XTrans III (15)","Negative [Color] (13)","Negative [New] (39)","Negative [Old] (44)","Print Films (12)","Slide [Color] (26)"}
#@gui :Preset=choice{1,"All [Collage]","None","Agfa APX 100","Agfa APX 25","Fuji Neopan 1600","Fuji Neopan Acros 100","Ilford Delta 100","Ilford Delta 3200","Ilford Delta 400","Ilford FP4 Plus 125","Ilford HP5 Plus 400","Ilford HPS 800","Ilford Pan F Plus 50","Ilford XP2","Kodak BW 400 CN","Kodak HIE (HS Infra)","Kodak T-Max 100","Kodak T-Max 3200","Kodak T-Max 400","Kodak Tri-X 400","Polaroid 664","Polaroid 667","Polaroid 672","Rollei IR 400","Rollei Ortho 25","Rollei Retro 100 Tonal","Rollei Retro 80s"}_2
#@gui :Preset=choice{1,"All [Collage]","None","Polaroid PX-100UV+ Cold --","Polaroid PX-100UV+ Cold -","Polaroid PX-100UV+ Cold","Polaroid PX-100UV+ Cold +","Polaroid PX-100UV+ Cold ++","Polaroid PX-100UV+ Cold +++","Polaroid PX-100UV+ Warm --","Polaroid PX-100UV+ Warm -","Polaroid PX-100UV+ Warm","Polaroid PX-100UV+ Warm +","Polaroid PX-100UV+ Warm ++","Polaroid PX-100UV+ Warm +++","Polaroid PX-680 --","Polaroid PX-680 -","Polaroid PX-680","Polaroid PX-680 +","Polaroid PX-680 ++","Polaroid PX-680 Cold --","Polaroid PX-680 Cold -","Polaroid PX-680 Cold","Polaroid PX-680 Cold +","Polaroid PX-680 Cold ++","Polaroid PX-680 Cold ++a","Polaroid PX-680 Warm --","Polaroid PX-680 Warm -","Polaroid PX-680 Warm","Polaroid PX-680 Warm +","Polaroid PX-680 Warm ++","Polaroid PX-70 --","Polaroid PX-70 -","Polaroid PX-70","Polaroid PX-70 +","Polaroid PX-70 ++","Polaroid PX-70 +++","Polaroid PX-70 Cold --","Polaroid PX-70 Cold -","Polaroid PX-70 Cold","Polaroid PX-70 Cold +","Polaroid PX-70 Cold ++","Polaroid PX-70 Warm --","Polaroid PX-70 Warm -","Polaroid PX-70 Warm","Polaroid PX-70 Warm +","Polaroid PX-70 Warm ++","Polaroid Time Zero (Expired) ---","Polaroid Time Zero (Expired) --","Polaroid Time Zero (Expired) -","Polaroid Time Zero (Expired)","Polaroid Time Zero (Expired) +","Polaroid Time Zero (Expired) ++","Polaroid Time Zero (Expired) Cold ---","Polaroid Time Zero (Expired) Cold --","Polaroid Time Zero (Expired) Cold -","Polaroid Time Zero (Expired) Cold"}_0
#@gui :Preset=choice{1,"All [Collage]","None","Fuji FP-100c --","Fuji FP-100c -","Fuji FP-100c","Fuji FP-100c (alt)","Fuji FP-100c +","Fuji FP-100c ++","Fuji FP-100c ++a","Fuji FP-100c +++","Fuji FP-100c Cool --","Fuji FP-100c Cool -","Fuji FP-100c Cool","Fuji FP-100c Cool +","Fuji FP-100c Cool ++","Fuji FP-100c Negative --","Fuji FP-100c Negative -","Fuji FP-100c Negative","Fuji FP-100c Negative +","Fuji FP-100c Negative ++","Fuji FP-100c Negative ++a","Fuji FP-100c Negative +++","Fuji FP-3000b --","Fuji FP-3000b -","Fuji FP-3000b","Fuji FP-3000b +","Fuji FP-3000b ++","Fuji FP-3000b +++","Fuji FP-3000b HC","Fuji FP-3000b Negative --","Fuji FP-3000b Negative -","Fuji FP-3000b Negative","Fuji FP-3000b Negative +","Fuji FP-3000b Negative ++","Fuji FP-3000b Negative +++","Fuji FP-3000b Negative Early","Polaroid 665 --","Polaroid 665 -","Polaroid 665","Polaroid 665 +","Polaroid 665 ++","Polaroid 665 Negative -","Polaroid 665 Negative","Polaroid 665 Negative +","Polaroid 665 Negative HC","Polaroid 669 --","Polaroid 669 -","Polaroid 669","Polaroid 669 +","Polaroid 669 ++","Polaroid 669 +++","Polaroid 669 Cold --","Polaroid 669 Cold -","Polaroid 669 Cold","Polaroid 669 Cold +","Polaroid 690 --","Polaroid 690 -","Polaroid 690","Polaroid 690 +","Polaroid 690 ++","Polaroid 690 Cold --","Polaroid 690 Cold -","Polaroid 690 Cold","Polaroid 690 Cold +","Polaroid 690 Cold ++","Polaroid 690 Warm --","Polaroid 690 Warm -","Polaroid 690 Warm","Polaroid 690 Warm +","Polaroid 690 Warm ++"}_0
#@gui :Preset=choice{1,"All [Collage]","None","Fuji FP-100c --","Fuji FP-100c -","Fuji FP-100c","Fuji FP-100c (alt)","Fuji FP-100c +","Fuji FP-100c ++","Fuji FP-100c ++a","Fuji FP-100c +++","Fuji FP-100c Cool --","Fuji FP-100c Cool -","Fuji FP-100c Cool","Fuji FP-100c Cool +","Fuji FP-100c Cool ++","Fuji FP-100c Negative --","Fuji FP-100c Negative -","Fuji FP-100c Negative","Fuji FP-100c Negative +","Fuji FP-100c Negative ++","Fuji FP-100c Negative ++a","Fuji FP-100c Negative +++","Fuji FP-3000b --","Fuji FP-3000b -","Fuji FP-3000b","Fuji FP-3000b +","Fuji FP-3000b ++","Fuji FP-3000b +++","Fuji FP-3000b HC","Fuji FP-3000b Negative --","Fuji FP-3000b Negative -","Fuji FP-3000b Negative","Fuji FP-3000b Negative +","Fuji FP-3000b Negative ++","Fuji FP-3000b Negative +++","Fuji FP-3000b Negative Early","Polaroid 665 --","Polaroid 665 -","Polaroid 665","Polaroid 665 +","Polaroid 665 ++","Polaroid 665 Negative -","Polaroid 665 Negative","Polaroid 665 Negative +","Polaroid 665 Negative HC","Polaroid 669 --","Polaroid 669 -","Polaroid 669","Polaroid 669 +","Polaroid 669 ++","Polaroid 669 +++","Polaroid 669 Cold --","Polaroid 669 Cold -","Polaroid 669 Cold","Polaroid 669 Cold +","Polaroid 690 --","Polaroid 690 -","Polaroid 690","Polaroid 690 +","Polaroid 690 ++","Polaroid 690 Cold --","Polaroid 690 Cold -","Polaroid 690 Cold","Polaroid 690 Cold +","Polaroid 690 Cold ++","Polaroid 690 Warm --","Polaroid 690 Warm -","Polaroid 690 Warm","Polaroid 690 Warm +","Polaroid 690 Warm ++"}_0
#@gui :Preset=choice(1,"All [Collage]","None","Acros","Acros+G","Acros+R","Acros+Ye","Astia","Classic Chrome","Mono","Mono+G","Mono+R","Mono+Ye","Pro Neg Hi","Pro Neg Std","Provia","Sepia","Velvia")_0
#@gui :Preset=choice(1,"All [Collage]","None","Agfa Ultra Color 100","Agfa Vista 200","Fuji Superia 200","Fuji Superia HG 1600","Fuji Superia Reala 100","Fuji Superia X-Tra 800","Kodak Ektar 100","Kodak Elite 100 XPRO","Kodak Elite Color 200","Kodak Elite Color 400","Kodak Portra 160 NC","Kodak Portra 160 VC","Lomography Redscale 100")_0
#@gui :Preset=choice{1,"All [Collage]","None","Fuji 160C -","Fuji 160C","Fuji 160C +","Fuji 160C ++","Fuji 400H -","Fuji 400H","Fuji 400H +","Fuji 400H ++","Fuji 800Z -","Fuji 800Z","Fuji 800Z +","Fuji 800Z ++","Fuji Ilford HP5 -","Fuji Ilford HP5","Fuji Ilford HP5 +","Fuji Ilford HP5 ++","Kodak Portra 160 -","Kodak Portra 160","Kodak Portra 160 +","Kodak Portra 160 ++","Kodak Portra 400 -","Kodak Portra 400","Kodak Portra 400 +","Kodak Portra 400 ++","Kodak Portra 800 -","Kodak Portra 800","Kodak Portra 800 +","Kodak Portra 800 ++","Kodak Portra 800 HC","Kodak T-MAX 3200 -","Kodak T-MAX 3200","Kodak T-MAX 3200 +","Kodak T-MAX 3200 ++","Kodak T-MAX 3200 (alt)","Kodak TRI-X 400 -","Kodak TRI-X 400","Kodak TRI-X 400 +","Kodak TRI-X 400 ++","Kodak TRI-X 400 (alt)"}_0
#@gui :Preset=choice(1,"All [Collage]","None","Fuji Ilford Delta 3200 -","Fuji Ilford Delta 3200","Fuji Ilford Delta 3200 +","Fuji Ilford Delta 3200 ++","Fuji Neopan 1600 -","Fuji Neopan 1600","Fuji Neopan 1600 +","Fuji Neopan 1600 ++","Fuji Superia 100 -","Fuji Superia 100","Fuji Superia 100 +","Fuji Superia 100 ++","Fuji Superia 400 -","Fuji Superia 400","Fuji Superia 400 +","Fuji Superia 400 ++","Fuji Superia 800 -","Fuji Superia 800","Fuji Superia 800 +","Fuji Superia 800 ++","Fuji Superia 1600 -","Fuji Superia 1600","Fuji Superia 1600 +","Fuji Superia 1600 ++","Kodak Portra 160 NC -","Kodak Portra 160 NC","Kodak Portra 160 NC +","Kodak Portra 160 NC ++","Kodak Portra 160 VC -","Kodak Portra 160 VC","Kodak Portra 160 VC +","Kodak Portra 160 VC ++","Kodak Portra 400 NC -","Kodak Portra 400 NC","Kodak Portra 400 NC +","Kodak Portra 400 NC ++","Kodak Portra 400 UC -","Kodak Portra 400 UC","Kodak Portra 400 UC +","Kodak Portra 400 UC ++","Kodak Portra 400 VC -","Kodak Portra 400 VC","Kodak Portra 400 VC +","Kodak Portra 400 VC ++")_0
#@gui :Preset=choice{1,"All [Collage]","None","Fuji 3510 (Constlclip)","Fuji 3510 (Constlmap)","Fuji 3510 (Cuspclip)","Fuji 3513 (Constlclip)","Fuji 3513 (Constlmap)","Fuji 3513 (Cuspclip)","Kodak 2383 (Constlclip)","Kodak 2383 (Constlmap)","Kodak 2383 (Cuspclip)","Kodak 2393 (Constlclip)","Kodak 2393 (Constlmap)","Kodak 2393 (Cuspclip)"}_0
#@gui :Preset=choice(1,"All [Collage]","None","Agfa Precisa 100","Fuji Astia 100F","Fuji FP 100C","Fuji Provia 100F","Fuji Provia 400F","Fuji Provia 400X","Fuji Sensia 100","Fuji Superia 200 XPRO","Fuji Velvia 50","Generic Fuji Astia 100","Generic Fuji Provia 100","Generic Fuji Velvia 100","Generic Kodachrome 64","Generic Kodak Ektachrome 100 VS","Kodak E-100 GX Ektachrome 100","Kodak Ektachrome 100 VS","Kodak Elite Chrome 200","Kodak Elite Chrome 400","Kodak Elite ExtraColor 100","Kodak Kodachrome 200","Kodak Kodachrome 25","Kodak Kodachrome 64","Lomography X-Pro Slide 200","Polaroid 669","Polaroid 690","Polaroid Polachrome")_0
"""  # noqa

################################################################################

####################################
#  === DATA COMBINER & OUTPUT ===  #
####################################


def get_all_data(help_file_path: str, update_file_path: str) -> dict[str, typing.Any]:
    """Handles the base step of retrieving all the data sets out.

    :param help_file_path: Path to the text file that generates the list of LUTs
        from `gmic help clut`
    :type help_file_path: str
    :param update_file_path: Path to the GMIC update file itself
    :type update_file_path: str
    :return: All of the data from the update parsing.
    :rtype: dict[str, typing.Any]
    """

    yaml_io = io.StringIO(KNOWN_LUT_PROVIDER_DATA_YAML)
    known_lut_providers = yaml.safe_load(yaml_io)

    ret_data = {
        'base_clut_list': read_base_cluts(help_file_path),
        'fx_color_presets': process_data(
            update_file_path,
            fx_color_presets_fetch_func,
            fx_section_process_func),
        'fx_simulate_film':  process_data(
            update_file_path,
            fx_simulate_film_fetch_func,
            fx_section_process_func),
        'gui_luts_pack_info': process_data(
            update_file_path,
            gui_luts_pack_info_fetch_func,
            gui_info_process_func
        ),
        'gui_simulate_film_info': process_data(
            update_file_path,
            gui_simulate_film_info_fetch_func,
            gui_info_process_func
        ),
        'known_luts_info': known_lut_providers,
        'underscore_fx_cluts': process_data(
            update_file_path,
            underscore_fx_cluts_fetch_func,
            underscore_fx_cluts_process_func,
            underscore_fx_cluts_post_process_func,
        ),
    }

    log_obj(ret_data, 'All Core Data')
    return ret_data


def merge_data(data: dict[str, typing.Any]) -> dict[str, typing.Any]:
    """Take the disparate items we processed from the files and combine them
    into a unified structure.

    :param data: The data captured from the various sections of the update file
    :type data: dict[str, typing.Any]
    :return: The single unified data structure for the data.
    :rtype: dict[str, typing.Any]
    """
    # Step 1 - Map category IDs to the category names, and lut IDs to names.
    presets_cat_id_name = zip_longest(
        data['fx_color_presets'],
        [item['name'] for item in data['gui_luts_pack_info']['categories']],
        [item['presets'] for item in data['gui_luts_pack_info']['presets']],
    )
    simfilm_cat_id_name = zip_longest(
        data['fx_simulate_film'],
        [item['name'] for item in data['gui_simulate_film_info']['categories']],
        [item['presets'] for item in data['gui_simulate_film_info']['presets']],
    )

    # Step 2 - In each category, map in the LUT IDs to the names.
    run_loop = [('Color Presets', presets_cat_id_name),
                ('Simulate Film', simfilm_cat_id_name)]

    records_list = []

    for subcategory_name, subcategory_info in run_loop:
        for category_id, category_name, lut_name_list in subcategory_info:
            lut_id_list = data['underscore_fx_cluts'].get(category_id, [])
            lut_data = zip_longest(lut_id_list, lut_name_list)
            new_record = {
                'grouping': subcategory_name,
                'category_id': category_id,
                'category_name': category_name,
                'luts_data': lut_data
            }
            records_list.append(new_record)

    # Step 3 - Mix in data from known luts info.
    for record in records_list:
        cat_id = record['category_id']
        if cat_id in data['known_luts_info']:
            update_dict = data['known_luts_info'][cat_id]
        else:
            update_dict = {
                'credits': None,
                'url': None,
            }

        record.update(update_dict)

    # Step 4 - Unroll the records into one big flat list.
    ret_records = []
    for record in records_list:
        base_record = copy.deepcopy(record)
        del (base_record['luts_data'])
        for lut_id, lut_name in record['luts_data']:
            add_record = copy.deepcopy(base_record)
            add_record['lut_id'] = lut_id
            add_record['lut_name'] = lut_name
            ret_records.append(add_record)

    log_obj(ret_records, 'Merged records before unknown records')

    # Step 5 - Find the unknown LUTs, add unknown records for them.
    all_luts_set = set(data['base_clut_list'])
    known_luts_list = set([item['lut_id'] for item in ret_records])

    unknown_luts = all_luts_set - known_luts_list
    for lut in unknown_luts:
        LOGGER.debug('Unknown LUT ID: %s', lut)
        record = {
            'grouping': 'Unknown',
            'category_id': 'unknown',
            'category_name': 'Unknown/No Credit',
            'credits': None,
            'url': None,
            'lut_id': lut,
            'lut_name': 'Unknown',
        }
        ret_records.append(record)

    # Step 6, sort records:
    def key_func(item):
        return (item['grouping'], item['category_name'], item['lut_name'])
    ret_records.sort(key=key_func)

    log_obj(ret_records, 'All LUT Info')
    return ret_records


###############################################################################

#############################
#  === MAIN ENTRYPOINT ===  #
#############################


def read_args() -> argparse.Namespace:
    """
    Read in command line arguments and parse them into usable configuration
    parameters

    :return: The arguments parsed for the application
    :rtype: argparse.Namespace
    """
    parser = argparse.ArgumentParser(description=__doc__)

    # Insert argparse arguments here.
    # Example arguments below.
    parser.add_argument(
        "update_file_path",
        type=str,
        help="The update file (*.gmic) to parse for data",
    )

    parser.add_argument(
        "help_clut_names_path",
        type=str,
        help="Path to the text file containing the CLUT names parsed from `gmic help cluts`",
    )

    parser.add_argument(
        "output_json_path",
        type=str,
        help="The location to store the output JSON file to",
    )

    # General flag for debug logging
    debug_section = parser.add_argument_group("debugging")
    debug_section.add_argument(
        "--debug", action="store_true", help="Enable debugging")

    args = parser.parse_args()
    return args


def validate_args(args: argparse.Namespace) -> None:
    """Validates the runtime arguments.

    :param args: The parsed arguments from the CLI.
    :type args: argparse.Namespace
    :raises FileNotFoundError: If either the update G'MIC file or the clut listing is not found.
    """
    if not pathlib.Path(args.update_file_path).is_file():
        err_msg = f'ERROR: The update file {args.update_file_path} does not exist.'
        LOGGER.error(err_msg)
        raise FileNotFoundError(err_msg)

    if not pathlib.Path(args.help_clut_names_path).is_file():
        err_msg = f'ERROR: The help file {args.help_clut_names_path} does not exist.'
        LOGGER.error(err_msg)
        raise FileNotFoundError(err_msg)

    output_parent_dir = pathlib.Path(args.output_json_path).parent
    if not output_parent_dir.is_dir():
        LOGGER.warning(
            f'Output directory {output_parent_dir} does not exist. Creating.')
        output_parent_dir.mkdir(parents=True, exist_ok=True)


def main() -> None:
    """Main Entry Point of the app"""
    parsed_args = read_args()
    if parsed_args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    LOGGER.debug("Arguments: %s", str(parsed_args))

    LOGGER.info('Retrieving all data from files')
    core_data = get_all_data(
        parsed_args.help_clut_names_path,
        parsed_args.update_file_path)

    LOGGER.info('Merging all data into unified structure')
    merged_data = merge_data(core_data)

    LOGGER.info('Writing data to JSON file')
    with open(parsed_args.output_json_path, 'w') as json_fh:
        json.dump(merged_data, json_fh, indent=4, sort_keys=True)

    LOGGER.info('Completed writing info to %s', parsed_args.output_json_path)

###############################################################################


if __name__ == "__main__":
    """Executed if run from the CLI"""
    main()
